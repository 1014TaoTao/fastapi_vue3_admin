<template>
  <div class="app-container">
    <!-- 搜索区域 -->
    <div class="search-container">
      <el-form :model="queryFormData" ref="queryFormRef" :inline="true" label-suffix=":">
        {% for column in columns %}
          {% if column.is_query == "1" %}
            {% set dict_type = column.dict_type %}
            {% set column_comment = column.column_comment if column.column_comment else '' %}
            {% set parentheseIndex = column_comment.find("（") %}
            {% set comment = column_comment[:parentheseIndex] if parentheseIndex != -1 else column_comment %}

            {% if column.html_type == "input" %}
              <el-form-item label="{{ comment }}" prop="{{ column.python_field }}">
                <el-input v-model="queryFormData.{{ column.python_field }}" placeholder="请输入{{ comment }}" clearable @keyup.enter="handleQuery" />
              </el-form-item>
            {% elif (column.html_type == "select" or column.html_type == "radio") and dict_type != "" %}
              <el-form-item label="{{ comment }}" prop="{{ column.python_field }}">
                <el-select v-model="queryFormData.{{ column.python_field }}" placeholder="请选择{{ comment }}" style="width: 180px" clearable>
                  <el-option v-for="dict in dictStore.getDictArray('{{ dict_type }}')" :key="dict.dict_value" :label="dict.dict_label" :value="dict.dict_value" />
                </el-select>
              </el-form-item>
            {% elif (column.html_type == "select" or column.html_type == "radio") and dict_type %}
              <el-form-item label="{{ comment }}" prop="{{ column.python_field }}">
                <el-select v-model="queryFormData.{{ column.python_field }}" placeholder="请选择{{ comment }}" clearable>
                  <el-option label="请选择字典生成" value="" />
                </el-select>
              </el-form-item>
            {% elif column.html_type == "datetime" and column.query_type != "BETWEEN" %}
              <el-form-item label="{{ comment }}" prop="{{ column.python_field }}">
                <el-date-picker v-model="queryFormData.{{ column.python_field }}" type="date" value-format="YYYY-MM-DD" clearable placeholder="请选择{{ comment }}" />
              </el-form-item>
            {% elif column.html_type == "datetime" and column.query_type == "BETWEEN" %}
              <el-form-item label="{{ comment }}" style="width: 308px">
                <el-date-picker v-model="dateRangeMap.{{ column.python_field }}" value-format="YYYY-MM-DD" type="daterange" range-separator="-" start-placeholder="开始日期" end-placeholder="结束日期" />
              </el-form-item>
            {% endif %}
          {% endif %}
        {% endfor %}
        <el-form-item class="search-buttons">
          <el-button type="primary" icon="search" @click="handleQuery">查询</el-button>
          <el-button icon="refresh" @click="handleResetQuery">重置</el-button>
        </el-form-item>
      </el-form>
    </div>

    <!-- 内容区域 -->
    <el-card shadow="hover" class="data-table">
      <template #header>
        <div class="card-header">
          <span>
            <el-tooltip content="{{ function_name }}列表">
              <QuestionFilled class="w-4 h-4 mx-1" />
            </el-tooltip>
            {{ function_name }}列表
          </span>
        </div>
      </template>

      <!-- 功能区域 -->
      <div class="data-table__toolbar">
        <div class="data-table__toolbar--actions">
          <el-row :gutter="10">
            <el-col :span="1.5">
              <el-button type="success" icon="plus" @click="handleOpenDialog('create')">新增</el-button>
            </el-col>
            <el-col :span="1.5">
              <el-button type="danger" icon="delete" :disabled="selectIds.length === 0" @click="handleDelete(selectIds)">批量删除</el-button>
            </el-col>
          </el-row>
        </div>
        <div class="data-table__toolbar--tools">
          <el-row :gutter="10">
            <el-col :span="1.5">
              <el-tooltip content="刷新">
                <el-button type="primary" icon="refresh" circle @click="handleRefresh" />
              </el-tooltip>
            </el-col>
          </el-row>
        </div>
      </div>

      <!-- 表格区域 -->
      <el-table
        ref="dataTableRef"
        v-loading="loading"
        :data="pageTableData"
        highlight-current-row
        class="data-table__content"
        height="450"
        border
        stripe
        @selection-change="handleSelectionChange"
      >
        <template #empty>
          <el-empty :image-size="80" description="暂无数据" />
        </template>
        <el-table-column type="selection" min-width="55" align="center" />
        <el-table-column fixed label="序号" min-width="60">
          <template #default="scope">
            {{ '{' }}{{ '{' }} (queryFormData.page_no - 1) * queryFormData.page_size + scope.$index + 1 {{ '}' }}{{ '}' }}
          </template>
        </el-table-column>
        {% for column in columns %}
          {% set python_field = column.python_field %}
          {% set column_comment = column.column_comment if column.column_comment else '' %}
          {% set parentheseIndex = column_comment.find("（") %}
          {% set comment = column_comment[:parentheseIndex] if parentheseIndex != -1 else column_comment %}
          {% if column.is_list == "1" %}
            <el-table-column label="{{ comment }}" prop="{{ python_field }}" min-width="140">
              {% if column.html_type == "datetime" %}
                <template #default="scope">
                  <span>{{ '{' }}{{ '{' }} scope.row.{{ python_field }} {{ '}' }}{{ '}' }}</span>
                </template>
              {% endif %}
            </el-table-column>
          {% endif %}
        {% endfor %}
        <el-table-column fixed="right" label="操作" align="center" min-width="200">
          <template #default="scope">
            <el-button type="info" size="small" link icon="document" @click="handleOpenDialog('detail', scope.row.id)">详情</el-button>
            <el-button type="primary" size="small" link icon="edit" @click="handleOpenDialog('update', scope.row.id)">编辑</el-button>
            <el-button type="danger" size="small" link icon="delete" @click="handleDelete([scope.row.id])">删除</el-button>
          </template>
        </el-table-column>
      </el-table>

      <!-- 分页区域 -->
      <template #footer>
        <pagination v-model:total="total" v-model:page="queryFormData.page_no" v-model:limit="queryFormData.page_size" @pagination="loadingData" />
      </template>
    </el-card>

    <!-- 弹窗区域 -->
    <el-dialog v-model="dialogVisible.visible" :title="dialogVisible.title" @close="handleCloseDialog">
      <!-- 详情 -->
      <template v-if="dialogVisible.type === 'detail'">
        <el-descriptions :column="4" border>
          {% for column in columns %}
            {% set python_field = column.python_field %}
            {% set column_comment = column.column_comment if column.column_comment else '' %}
            {% set parentheseIndex = column_comment.find("（") %}
            {% set comment = column_comment[:parentheseIndex] if parentheseIndex != -1 else column_comment %}
            <el-descriptions-item label="{{ comment }}" :span="2">
              {{ '{' }}{{ '{' }} detailFormData.{{ python_field }} {{ '}' }}{{ '}' }}
            </el-descriptions-item>
          {% endfor %}
        </el-descriptions>
      </template>
      <!-- 新增、编辑表单 -->
      <template v-else>
        <el-form ref="dataFormRef" :model="formData" :rules="rules" label-suffix=":" label-width="auto" label-position="right">
          {% for column in columns %}
            {% if column.is_insert == "1" or column.is_edit == "1" %}
              {% set dict_type = column.dict_type %}
              {% set column_comment = column.column_comment if column.column_comment else '' %}
              {% set parentheseIndex = column_comment.find("（") %}
              {% set comment = column_comment[:parentheseIndex] if parentheseIndex != -1 else column_comment %}
              {% set required = 'true' if column.is_required == '1' else 'false' %}

              {% if column.html_type == "input" %}
                <el-form-item label="{{ comment }}" prop="{{ column.python_field }}" :required="{{ required }}">
                  <el-input v-model="formData.{{ column.python_field }}" placeholder="请输入{{ comment }}" />
                </el-form-item>
              {% elif column.html_type == "textarea" %}
                <el-form-item label="{{ comment }}" prop="{{ column.python_field }}" :required="{{ required }}">
                  <el-input v-model="formData.{{ column.python_field }}" type="textarea" placeholder="请输入{{ comment }}" rows="4" />
                </el-form-item>
              {% elif (column.html_type == "select" or column.html_type == "radio") and dict_type != "" %}
                <el-form-item label="{{ comment }}" prop="{{ column.python_field }}" :required="{{ required }}">
                  <el-select v-model="formData.{{ column.python_field }}" placeholder="请选择{{ comment }}">
                    <el-option v-for="dict in dictStore.getDictArray('{{ dict_type }}')" :key="dict.dict_value" :label="dict.dict_label" :value="dict.dict_value" />
                  </el-select>
                </el-form-item>
              {% elif (column.html_type == "select" or column.html_type == "radio") and dict_type %}
                <el-form-item label="{{ comment }}" prop="{{ column.python_field }}" :required="{{ required }}">
                  <el-select v-model="formData.{{ column.python_field }}" placeholder="请选择{{ comment }}">
                    <el-option label="请选择字典生成" value="" />
                  </el-select>
                </el-form-item>
              {% elif column.html_type == "date" %}
                <el-form-item label="{{ comment }}" prop="{{ column.python_field }}" :required="{{ required }}">
                  <el-date-picker v-model="formData.{{ column.python_field }}" type="date" value-format="YYYY-MM-DD" placeholder="请选择{{ comment }}" />
                </el-form-item>
              {% elif column.html_type == "datetime" %}
                <el-form-item label="{{ comment }}" prop="{{ column.python_field }}" :required="{{ required }}">
                  <el-date-picker v-model="formData.{{ column.python_field }}" type="datetime" value-format="YYYY-MM-DD HH:mm:ss" placeholder="请选择{{ comment }}" />
                </el-form-item>
              {% elif column.html_type == "checkbox" %}
                <el-form-item label="{{ comment }}" prop="{{ column.python_field }}">
                  <el-checkbox v-model="formData.{{ column.python_field }}">{{ comment }}</el-checkbox>
                </el-form-item>
              {% elif column.html_type == "imageUpload" %}
                <el-form-item label="{{ comment }}" prop="{{ column.python_field }}">
                  <SingleImageUpload v-model="formData.{{ column.python_field }}" />
                </el-form-item>
              {% endif %}
            {% endif %}
          {% endfor %}
        </el-form>
      </template>

      <template #footer>
        <div class="dialog-footer">
          <el-button @click="handleCloseDialog">取消</el-button>
          <el-button v-if="dialogVisible.type !== 'detail'" type="primary" @click="handleSubmit">确定</el-button>
          <el-button v-else type="primary" @click="handleCloseDialog">确定</el-button>
        </div>
      </template>
    </el-dialog>
  </div>
</template>

<script setup lang="ts">
import { ref, reactive, onMounted } from 'vue'
import { ElMessage, ElMessageBox } from 'element-plus'
import {{ business_name|replace('_', ' ')|title|replace(' ', '') }}API from '@/api/{{ module_name }}/{{ business_name }}'
import { useDictStore } from '@/store/index'
import SingleImageUpload from '@/components/Upload/SingleImageUpload.vue'

const queryFormRef = ref()
const dataFormRef = ref()
const total = ref(0)
const selectIds = ref([])
const loading = ref(false)

// 字典仓库与需要加载的字典类型
const dictStore = useDictStore()
const dictTypes = [
  {% for column in columns %}
    {% if column.dict_type %}
      '{{ column.dict_type }}',
    {% endif %}
  {% endfor %}
]

// 表格数据
const pageTableData = ref([])

// 详情表单
const detailFormData = ref({})

// 日期范围映射（支持多个 BETWEEN 字段）
const dateRangeMap = reactive({})

// 查询参数
const queryFormData = reactive({
  page_no: 1,
  page_size: 10,
  {% for column in columns %}
    {% if column.is_query == "1" and column.query_type != "BETWEEN" %}
      {{ column.python_field }}: undefined,
    {% endif %}
  {% endfor %}
})

// 加载表格数据
async function loadingData() {
  loading.value = true
  try {
    const params = {
      ...queryFormData,
      {% for column in columns %}
        {% if column.html_type == "datetime" and column.query_type == "BETWEEN" %}
          {{ column.python_field }}_start: dateRangeMap.{{ column.python_field }} && dateRangeMap.{{ column.python_field }}.length > 0 ? dateRangeMap.{{ column.python_field }}[0] : undefined,
          {{ column.python_field }}_end: dateRangeMap.{{ column.python_field }} && dateRangeMap.{{ column.python_field }}.length > 0 ? dateRangeMap.{{ column.python_field }}[1] : undefined,
        {% endif %}
      {% endfor %}
    }
    const response = await {{ business_name|replace('_', ' ')|title|replace(' ', '') }}API.list(params)
    // 参考 demo.ts 返回结构
    pageTableData.value = response.data.data.items
    total.value = response.data.data.total
  } catch (error) {
    console.error(error)
  } finally {
    loading.value = false
  }
}

// 查询（重置页码后获取数据）
async function handleQuery() {
  queryFormData.page_no = 1
  loadingData()
}

// 重置查询
async function handleResetQuery() {
  queryFormRef.value.resetFields()
  queryFormData.page_no = 1
  // 重置所有日期范围选择器
  {% for column in columns %}
    {% if column.html_type == "datetime" and column.query_type == "BETWEEN" %}
      dateRangeMap.{{ column.python_field }} = []
    {% endif %}
  {% endfor %}
  loadingData()
}

// 行复选框选中项变化
function handleSelectionChange(selection) {
  selectIds.value = selection.map((item) => item.id)
}

// 关闭弹窗
function handleCloseDialog() {
  dialogVisible.visible = false
}

// 打开弹窗
async function handleOpenDialog(type, id) {
  dialogVisible.type = type
  if (id) {
    const response = await {{ business_name|replace('_', ' ')|title|replace(' ', '') }}API.detail(id)
    if (type === 'detail') {
      dialogVisible.title = '详情'
      Object.assign(detailFormData.value, response.data.data)
    } else if (type === 'update') {
      dialogVisible.title = '修改'
      Object.assign(formData, response.data.data)
    }
  } else {
    dialogVisible.title = '新增{{ function_name }}'
    formData.id = undefined
  }
  dialogVisible.visible = true
}

// 提交表单
async function handleSubmit() {
  dataFormRef.value.validate(async (valid) => {
    if (valid) {
      loading.value = true
      try {
        const id = formData.id
        if (id) {
          await {{ business_name|replace('_', ' ')|title|replace(' ', '') }}API.update(id, { id, ...formData })
          ElMessage.success('修改成功')
        } else {
          await {{ business_name|replace('_', ' ')|title|replace(' ', '') }}API.create(formData)
          ElMessage.success('新增成功')
        }
        dialogVisible.visible = false
        handleResetQuery()
      } catch (error) {
        console.error(error)
        ElMessage.error('操作失败')
      } finally {
        loading.value = false
      }
    }
  })
}

// 删除、批量删除
async function handleDelete(ids) {
  ElMessageBox.confirm('确认删除该项数据?', '警告', {
    confirmButtonText: '确定',
    cancelButtonText: '取消',
    type: 'warning',
  })
    .then(async () => {
      try {
        loading.value = true
        await {{ business_name|replace('_', ' ')|title|replace(' ', '') }}API.delete(ids)
        ElMessage.success('删除成功')
        handleResetQuery()
      } catch (error) {
        console.error(error)
        ElMessage.error('删除失败')
      } finally {
        loading.value = false
      }
    })
    .catch(() => {
      ElMessageBox.close()
    })
}

// 弹窗状态
const dialogVisible = reactive({
  title: '',
  visible: false,
  type: 'create', // 'create' | 'update' | 'detail'
})

// 编辑表单
const formData = reactive({
  id: undefined,
  {% for column in columns %}
    {% if column.is_insert == "1" or column.is_edit == "1" %}
      {{ column.python_field }}: undefined,
    {% endif %}
  {% endfor %}
})

// 表单验证规则（必填项按 is_required 生成）
const rules = reactive({
  {% for column in columns %}
    {% if column.is_insert == "1" or column.is_edit == "1" %}
      {% set required = 'true' if column.is_required == '1' else 'false' %}
      {{ column.python_field }}: [
        { required: {{ required }}, message: '请输入{{ column.column_comment or column.python_field }}', trigger: 'blur' },
      ],
    {% endif %}
  {% endfor %}
})

// 列表刷新
async function handleRefresh() {
  await loadingData()
}

onMounted(async () => {
  // 预加载字典数据
  if (dictTypes.length > 0) {
    await dictStore.getDict(dictTypes)
  }
  loadingData()
})
</script>

<style lang="scss" scoped></style>
