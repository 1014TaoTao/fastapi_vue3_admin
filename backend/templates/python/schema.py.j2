# -*- coding:utf-8 -*-

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, ConfigDict, Field
from pydantic.alias_generators import to_camel

from app.core.base_schema import BaseSchema


class {{ table_name|snake_to_pascal_case }}CreateSchema(BaseModel):
    """
    {{ function_name }}新增模型
    """

    model_config = ConfigDict(alias_generator=to_camel, from_attributes=True)

    {% for column in columns %}
    {{ column.column_name }}: Optional[{{ column.python_type }}] = Field(default=None, description='{{ column.column_comment }}')
    {% endfor %}


class {{ table_name|snake_to_pascal_case }}UpdateSchema({{ table_name|snake_to_pascal_case }}CreateSchema):
    """
    {{ function_name }}更新模型
    """
    pass


class {{ table_name|snake_to_pascal_case }}OutSchema({{ table_name|snake_to_pascal_case }}CreateSchema, BaseSchema):
    """
    {{ function_name }}响应模型
    """
    
    model_config = ConfigDict(from_attributes=True)

    id: Optional[int] = Field(default=None, description='编号')
    create_by: Optional[str] = Field(default=None, description='创建者')
    create_time: Optional[datetime] = Field(default=None, description='创建时间')
    update_by: Optional[str] = Field(default=None, description='更新者')
    update_time: Optional[datetime] = Field(default=None, description='更新时间')
    remark: Optional[str] = Field(default=None, description='备注')